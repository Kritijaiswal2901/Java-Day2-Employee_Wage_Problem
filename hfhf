import java.util.ArrayList;
import java.util.List;

class EmployeeWage {

    private static boolean checkAttendance() {
        int empType = (int) (Math.floor(Math.random() * 10) % 2);
        return empType == 1;
    }

    private static int dailyWage(int todayDailyHour) {
        final int DAILY_WAGE_PER_HOUR = 20;
        return DAILY_WAGE_PER_HOUR * todayDailyHour;
    }

    private static int isPartTime() {
        int empType = (int) (Math.floor(Math.random() * 10) % 2);
        return empType;
    }

    private static int monthlyWage(int dailyWage) {
        final int NO_OF_DAYS = 20;
        return NO_OF_DAYS * dailyWage;
    }

    private static int calculateEmployeeWage(int fullTimeDailyHour, int partTimeDailyHour, int totalHours, int totalDays) {
        int totalWage = 0;
        while (totalDays < 20 && totalHours < 100) {
            if (isPartTime() == 0) {
                totalHours += fullTimeDailyHour;
                totalWage += dailyWage(fullTimeDailyHour);
            } else {
                totalHours += partTimeDailyHour;
                totalWage += dailyWage(partTimeDailyHour);
            }
            totalDays++;
        }
        return totalWage;
    }

    public static void main(String[] args) {
        System.out.println("Welcome to employee wage computation problem");

        final int FULL_TIME_DAILY_HOUR = 8;
        final int PART_TIME_DAILY_HOUR = 4;

        // UC 8: Compute Employee Wage for multiple companies - Class for each company
        class CompanyEmpWage {
            private final String companyName;
            private final int fullTimeDailyHour;
            private final int partTimeDailyHour;
            private final int noOfDays;
            private final int maxHours;
            private int totalWage;

            public CompanyEmpWage(String companyName, int fullTimeDailyHour, int partTimeDailyHour, int noOfDays, int maxHours) {
                this.companyName = companyName;
                this.fullTimeDailyHour = fullTimeDailyHour;
                this.partTimeDailyHour = partTimeDailyHour;
                this.noOfDays = noOfDays;
                this.maxHours = maxHours;
                this.totalWage = 0;
            }

            public String getCompanyName() {
                return companyName;
            }

            public int getFullTimeDailyHour() {
                return fullTimeDailyHour;
            }

            public int getPartTimeDailyHour() {
                return partTimeDailyHour;
            }

            public int getTotalWage() {
                return totalWage;
            }

            public void setTotalWage(int totalWage) {
                this.totalWage = totalWage;
            }
        }

        // UC 9: Ability to save the Total Wage for Each Company
        List<CompanyEmpWage> companies = new ArrayList<>();

        // UC 10: Ability to manage Employee Wage of multiple companies
        companies.add(new CompanyEmpWage("Company1", FULL_TIME_DAILY_HOUR, PART_TIME_DAILY_HOUR, 20, 100));
        companies.add(new CompanyEmpWage("Company2", FULL_TIME_DAILY_HOUR, PART_TIME_DAILY_HOUR, 20, 100));

        // UC 11: Ability to manage Employee Wage of multiple companies using Interface approach
        interface EmpWageInterface {
            void addCompany(CompanyEmpWage company);
            void computeWages();
        }

        class EmpWageBuilderInterface implements EmpWageInterface {
            private final List<CompanyEmpWage> companies;

            public EmpWageBuilderInterface() {
                this.companies = new ArrayList<>();
            }

            @Override
            public void addCompany(CompanyEmpWage company) {
                companies.add(company);
            }

            @Override
            public void computeWages() {
                for (CompanyEmpWage company : companies) {
                    int totalWage = calculateEmployeeWage(
                            company.getFullTimeDailyHour(),
                            company.getPartTimeDailyHour(),
                            0,
                            0
                    );
                    company.setTotalWage(totalWage);
                }
            }
        }

        // UC 12: Refactor to have list of multiple companies to manage Employee Wage
        class EmpWageBuilderArrayList {
            private final List<CompanyEmpWage> companies;

            public EmpWageBuilderArrayList() {
                this.companies = new ArrayList<>();
            }

            public void addCompany(CompanyEmpWage company) {
                companies.add(company);
            }

            public void computeWages() {
                for (CompanyEmpWage company : companies) {
                    int totalWage = calculateEmployeeWage(
                            company.getFullTimeDailyHour(),
                            company.getPartTimeDailyHour(),
                            0,
                            0
                    );
                    company.setTotalWage(totalWage);
                }
            }
        }

        // UC 13: Ability to get the Total Wage when queried by Company
        class EmpWageBuilderWithQuery {
            private final List<CompanyEmpWage> companies;

            public EmpWageBuilderWithQuery() {
                this.companies = new ArrayList<>();
            }

            public void addCompany(CompanyEmpWage company) {
                companies.add(company);
            }

            public void computeWages() {
                for (CompanyEmpWage company : companies) {
                    int totalWage = calculateEmployeeWage(
                            company.getFullTimeDailyHour(),
                            company.getPartTimeDailyHour(),
                            0,
                            0
                    );
                    company.setTotalWage(totalWage);
                }
            }

            public int getTotalWageByCompany(String companyName) {
                for (CompanyEmpWage company : companies) {
                    if (company.getCompanyName().equals(companyName)) {
                        return company.getTotalWage();
                    }
                }
                return 0; // Return 0 if company not found
            }
        }

        // Example Usage
        EmpWageBuilderArrayList empWageBuilder = new EmpWageBuilderArrayList();
        empWageBuilder.addCompany(new CompanyEmpWage("Company1", FULL_TIME_DAILY_HOUR, PART_TIME_DAILY_HOUR, 20, 100));
        empWageBuilder.addCompany(new CompanyEmpWage("Company2", FULL_TIME_DAILY_HOUR, PART_TIME_DAILY_HOUR, 20, 100));
        empWageBuilder.computeWages();

        // Query Total Wage for
